name: Push to Docker Registries
on:
  push:
    branches:
      - master
    paths-ignore:
      - README.md

  workflow_dispatch:

env:
  DOCKER_ORG: unfor19
  DOCKER_REPO: awesome-pwa
  DOCKER_BUILD_CONTEXT: awesome-pwa
  PURGE_CACHE: 4
  # Required secrets:
  # - DOCKERHUB_USERNAME
  # - DOCKERHUB_TOKEN

jobs:
  docker:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - DOCKERFILE_PATH: Dockerfile
            DOCKER_BUILD_TARGET: dev
            DOCKER_TAG_ONLY: dev
            NODE_VERSION: 18.9.0
            ALPINE_VERSION: 3.16
    steps:
      - uses: actions/checkout@v2
      - name: Prepare
        id: prepare
        run: |
          set -x
          DOCKER_ORG_REPO="${DOCKER_ORG}/${DOCKER_REPO}"
          echo ::set-output name=docker_org_repo::${DOCKER_ORG_REPO}
          DOCKER_TAG_LATEST=${DOCKER_ORG_REPO}:${{ matrix.DOCKER_TAG_ONLY }}
          echo ::set-output name=docker_tag_latest::${DOCKER_TAG_LATEST}
          DOCKER_TAG_RELEASE=${DOCKER_ORG_REPO}:${{ matrix.DOCKER_TAG_ONLY }}-${GITHUB_SHA:0:8}
          echo ::set-output name=docker_tag_release::${DOCKER_TAG_RELEASE}
          set +x
      - # Build for arm64 so the app can run on macOS M1
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - # Required for Docker cache
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}            
      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.DOCKER_BUILD_CONTEXT }}
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          file: ${{ matrix.Dockerfile }}
          platforms: linux/amd64,linux/arm64          
          build-args: |
            NODE_VERSION=${{ matrix.NODE_VERSION }}
            ALPINE_VERSION=${{ matrix.ALPINE_VERSION }}
          target: ${{ matrix.DOCKER_BUILD_TARGET }}
          tags: |
            ${{ steps.prepare.outputs.docker_tag_latest }}
            ${{ steps.prepare.outputs.docker_tag_release }}
          cache-from: type=gha
          cache-to: type=gha,mode=max